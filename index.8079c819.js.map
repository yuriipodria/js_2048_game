{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nclass $a5fd07fa01589658$export$2e2bcd8739ae039 {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ score = 0;\n    status = $a5fd07fa01589658$export$2e2bcd8739ae039.STATUS_IDLE;\n    static STATUS_IDLE = \"idle\";\n    static STATUS_PLAYING = \"playing\";\n    static STATUS_WIN = \"win\";\n    static STATUS_LOSE = \"lose\";\n    static INITIAL_MERGE_FLAGS = [\n        [\n            false,\n            false,\n            false,\n            false\n        ],\n        [\n            false,\n            false,\n            false,\n            false\n        ],\n        [\n            false,\n            false,\n            false,\n            false\n        ],\n        [\n            false,\n            false,\n            false,\n            false\n        ]\n    ];\n    constructor(table, initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.table = table;\n        this.state = initialState;\n        this.tableBody = this.table.tBodies[0];\n        this.tableRows = [\n            ...this.tableBody.rows\n        ];\n        this.tableRows = this.tableRows.map((row)=>[\n                ...row.cells\n            ]);\n    }\n    moveTilesToTheLeft(row, rowIndex, mergeFlags, fromIndex, toIndex) {\n        if (toIndex < 0 || row[fromIndex] === 0) return;\n        if (row[toIndex] === row[fromIndex] && !mergeFlags[rowIndex][toIndex] && !mergeFlags[rowIndex][fromIndex]) {\n            row[toIndex] *= 2;\n            this.score += row[toIndex];\n            row[fromIndex] = 0;\n            mergeFlags[rowIndex][toIndex] = true;\n        } else if (row[toIndex] === 0) {\n            row[toIndex] = row[fromIndex];\n            row[fromIndex] = 0;\n            if (mergeFlags[rowIndex][fromIndex]) mergeFlags[rowIndex][toIndex] = true;\n        }\n    }\n    moveLeft() {\n        const clone = structuredClone(this.getState());\n        const mergeFlags = structuredClone($a5fd07fa01589658$export$2e2bcd8739ae039.INITIAL_MERGE_FLAGS);\n        this.getState().forEach((row, rowIndex)=>{\n            for(let columnIndex = 3; columnIndex > 0; columnIndex--){\n                this.moveTilesToTheLeft(row, rowIndex, mergeFlags, columnIndex - 2, columnIndex - 3);\n                this.moveTilesToTheLeft(row, rowIndex, mergeFlags, columnIndex - 1, columnIndex - 2);\n                this.moveTilesToTheLeft(row, rowIndex, mergeFlags, columnIndex, columnIndex - 1);\n            }\n        });\n        if (!this.areStatesEqual(clone)) {\n            this.spawnNumber();\n            this.updateTable();\n        }\n        if (this.checkWin()) this.status = $a5fd07fa01589658$export$2e2bcd8739ae039.STATUS_WIN;\n        if (this.checkLose()) this.status = $a5fd07fa01589658$export$2e2bcd8739ae039.STATUS_LOSE;\n    }\n    moveRight() {\n        this.getState().map((row)=>row.reverse());\n        this.moveLeft();\n        this.getState().map((row)=>row.reverse());\n        this.updateTable();\n    }\n    moveTilesUp(state, columnIndex, mergeFlags, fromIndex, toIndex) {\n        if (toIndex < 0 || state[fromIndex][columnIndex] === 0) return;\n        if (state[toIndex][columnIndex] === state[fromIndex][columnIndex] && !mergeFlags[fromIndex][columnIndex] && !mergeFlags[toIndex][columnIndex]) {\n            state[toIndex][columnIndex] *= 2;\n            this.score += state[toIndex][columnIndex];\n            state[fromIndex][columnIndex] = 0;\n            mergeFlags[toIndex][columnIndex] = true;\n        } else if (state[toIndex][columnIndex] === 0) {\n            state[toIndex][columnIndex] = state[fromIndex][columnIndex];\n            state[fromIndex][columnIndex] = 0;\n            if (mergeFlags[fromIndex][columnIndex]) mergeFlags[toIndex][columnIndex] = true;\n        }\n    }\n    moveUp() {\n        const clone = structuredClone(this.getState());\n        const mergeFlags = structuredClone($a5fd07fa01589658$export$2e2bcd8739ae039.INITIAL_MERGE_FLAGS);\n        this.getState().forEach((_, columnIndex, state)=>{\n            for(let rowIndex = 3; rowIndex > 0; rowIndex--){\n                this.moveTilesUp(state, columnIndex, mergeFlags, rowIndex - 2, rowIndex - 3);\n                this.moveTilesUp(state, columnIndex, mergeFlags, rowIndex - 1, rowIndex - 2);\n                this.moveTilesUp(state, columnIndex, mergeFlags, rowIndex, rowIndex - 1);\n            }\n        });\n        if (!this.areStatesEqual(clone)) {\n            this.spawnNumber();\n            this.updateTable();\n        }\n        if (this.checkWin()) this.status = $a5fd07fa01589658$export$2e2bcd8739ae039.STATUS_WIN;\n        if (this.checkLose()) this.status = $a5fd07fa01589658$export$2e2bcd8739ae039.STATUS_LOSE;\n    }\n    moveDown() {\n        this.getState().reverse();\n        this.moveUp();\n        this.getState().reverse();\n        this.updateTable();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` + the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = $a5fd07fa01589658$export$2e2bcd8739ae039.STATUS_PLAYING;\n        this.spawnNumber();\n        this.spawnNumber();\n        this.updateTable();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.start();\n    }\n    checkWin() {\n        return this.getState().some((row)=>{\n            return row.some((cell)=>cell === 2048);\n        });\n    }\n    checkLose() {\n        const areZeros = this.getState().some((row)=>{\n            return row.some((cell)=>cell === 0);\n        });\n        const areSameNumbersRows = this.getState().some((row)=>{\n            return row.some((cell, columnIndex)=>{\n                return cell === row[columnIndex + 1];\n            });\n        });\n        const areSameNumbersColumns = this.getState().some((row, rowIndex, state)=>{\n            return row.some((cell, columnIndex)=>{\n                if (rowIndex + 1 < 4) return cell === state[rowIndex + 1][columnIndex];\n                else return false;\n            });\n        });\n        return !areZeros && !areSameNumbersRows && !areSameNumbersColumns;\n    }\n    spawnNumber() {\n        const emptyCells = [];\n        this.getState().forEach((row, rowIndex)=>{\n            row.forEach((cell, columnIndex)=>{\n                if (cell === 0) emptyCells.push([\n                    rowIndex,\n                    columnIndex\n                ]);\n            });\n        });\n        const [randomRowIndex, randomColumnIndex] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        if (Math.floor(Math.random() * 10)) this.getState()[randomRowIndex][randomColumnIndex] = 2;\n        else this.getState()[randomRowIndex][randomColumnIndex] = 4;\n    }\n    areStatesEqual(clone) {\n        return this.getState().every((row, rowIndex)=>{\n            return row.every((cell, cellIndex)=>cell === clone[rowIndex][cellIndex]);\n        });\n    }\n    updateTable() {\n        this.tableRows.forEach((row, rowIndex)=>{\n            row.forEach((cell, cellIndex)=>{\n                cell.className = \"field-cell\";\n                cell.textContent = this.getState()[rowIndex][cellIndex];\n                cell.classList.add(`field-cell--${cell.textContent}`);\n            });\n        });\n        this.tableRows.forEach((row)=>{\n            row.forEach((cell)=>{\n                if (cell.textContent === \"0\") cell.textContent = \"\";\n            });\n        });\n    }\n}\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$table = document.querySelector(\"table\");\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)($09e991522ca7e64e$var$table);\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$loseMeassage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n        $09e991522ca7e64e$var$loseMeassage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n    }\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === (0, $a5fd07fa01589658$export$2e2bcd8739ae039).STATUS_PLAYING) switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case (0, $a5fd07fa01589658$export$2e2bcd8739ae039).STATUS_WIN:\n            $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n            break;\n        case (0, $a5fd07fa01589658$export$2e2bcd8739ae039).STATUS_LOSE:\n            $09e991522ca7e64e$var$loseMeassage.classList.remove(\"hidden\");\n            break;\n    }\n});\n\n\n//# sourceMappingURL=index.8079c819.js.map\n","'use strict';\nimport Game from '../modules/Game.class';\n\nconst table = document.querySelector('table');\n\nconst game = new Game(table);\n\nconst startButton = document.querySelector('.start');\nconst gameScore = document.querySelector('.game-score');\nconst startMessage = document.querySelector('.message-start');\nconst loseMeassage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    game.start();\n    startButton.textContent = 'Restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startMessage.classList.add('hidden');\n  } else {\n    game.restart();\n    gameScore.textContent = game.getScore();\n    loseMeassage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === Game.STATUS_PLAYING) {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n  }\n\n  gameScore.textContent = game.getScore();\n\n  switch (game.getStatus()) {\n    case Game.STATUS_WIN:\n      winMessage.classList.remove('hidden');\n      break;\n\n    case Game.STATUS_LOSE:\n      loseMeassage.classList.remove('hidden');\n      break;\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nexport default class Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  score = 0;\n\n  status = Game.STATUS_IDLE;\n\n  static STATUS_IDLE = 'idle';\n  static STATUS_PLAYING = 'playing';\n  static STATUS_WIN = 'win';\n  static STATUS_LOSE = 'lose';\n\n  static INITIAL_MERGE_FLAGS = [\n    [false, false, false, false],\n    [false, false, false, false],\n    [false, false, false, false],\n    [false, false, false, false],\n  ];\n\n  constructor(\n    table,\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.table = table;\n    this.state = initialState;\n    this.tableBody = this.table.tBodies[0];\n    this.tableRows = [...this.tableBody.rows];\n    this.tableRows = this.tableRows.map((row) => [...row.cells]);\n  }\n\n  moveTilesToTheLeft(row, rowIndex, mergeFlags, fromIndex, toIndex) {\n    if (toIndex < 0 || row[fromIndex] === 0) {\n      return;\n    }\n\n    if (\n      row[toIndex] === row[fromIndex] &&\n      !mergeFlags[rowIndex][toIndex] &&\n      !mergeFlags[rowIndex][fromIndex]\n    ) {\n      row[toIndex] *= 2;\n      this.score += row[toIndex];\n      row[fromIndex] = 0;\n      mergeFlags[rowIndex][toIndex] = true;\n    } else if (row[toIndex] === 0) {\n      row[toIndex] = row[fromIndex];\n      row[fromIndex] = 0;\n\n      if (mergeFlags[rowIndex][fromIndex]) {\n        mergeFlags[rowIndex][toIndex] = true;\n      }\n    }\n  }\n\n  moveLeft() {\n    const clone = structuredClone(this.getState());\n\n    const mergeFlags = structuredClone(Game.INITIAL_MERGE_FLAGS);\n\n    this.getState().forEach((row, rowIndex) => {\n      for (let columnIndex = 3; columnIndex > 0; columnIndex--) {\n        this.moveTilesToTheLeft(\n          row,\n          rowIndex,\n          mergeFlags,\n          columnIndex - 2,\n          columnIndex - 3,\n        );\n\n        this.moveTilesToTheLeft(\n          row,\n          rowIndex,\n          mergeFlags,\n          columnIndex - 1,\n          columnIndex - 2,\n        );\n\n        this.moveTilesToTheLeft(\n          row,\n          rowIndex,\n          mergeFlags,\n          columnIndex,\n          columnIndex - 1,\n        );\n      }\n    });\n\n    if (!this.areStatesEqual(clone)) {\n      this.spawnNumber();\n      this.updateTable();\n    }\n\n    if (this.checkWin()) {\n      this.status = Game.STATUS_WIN;\n    }\n\n    if (this.checkLose()) {\n      this.status = Game.STATUS_LOSE;\n    }\n  }\n\n  moveRight() {\n    this.getState().map((row) => row.reverse());\n    this.moveLeft();\n    this.getState().map((row) => row.reverse());\n    this.updateTable();\n  }\n\n  moveTilesUp(state, columnIndex, mergeFlags, fromIndex, toIndex) {\n    if (toIndex < 0 || state[fromIndex][columnIndex] === 0) {\n      return;\n    }\n\n    if (\n      state[toIndex][columnIndex] === state[fromIndex][columnIndex] &&\n      !mergeFlags[fromIndex][columnIndex] &&\n      !mergeFlags[toIndex][columnIndex]\n    ) {\n      state[toIndex][columnIndex] *= 2;\n      this.score += state[toIndex][columnIndex];\n      state[fromIndex][columnIndex] = 0;\n      mergeFlags[toIndex][columnIndex] = true;\n    } else if (state[toIndex][columnIndex] === 0) {\n      state[toIndex][columnIndex] = state[fromIndex][columnIndex];\n      state[fromIndex][columnIndex] = 0;\n\n      if (mergeFlags[fromIndex][columnIndex]) {\n        mergeFlags[toIndex][columnIndex] = true;\n      }\n    }\n  }\n\n  moveUp() {\n    const clone = structuredClone(this.getState());\n\n    const mergeFlags = structuredClone(Game.INITIAL_MERGE_FLAGS);\n\n    this.getState().forEach((_, columnIndex, state) => {\n      for (let rowIndex = 3; rowIndex > 0; rowIndex--) {\n        this.moveTilesUp(\n          state,\n          columnIndex,\n          mergeFlags,\n          rowIndex - 2,\n          rowIndex - 3,\n        );\n\n        this.moveTilesUp(\n          state,\n          columnIndex,\n          mergeFlags,\n          rowIndex - 1,\n          rowIndex - 2,\n        );\n\n        this.moveTilesUp(\n          state,\n          columnIndex,\n          mergeFlags,\n          rowIndex,\n          rowIndex - 1,\n        );\n      }\n    });\n\n    if (!this.areStatesEqual(clone)) {\n      this.spawnNumber();\n      this.updateTable();\n    }\n\n    if (this.checkWin()) {\n      this.status = Game.STATUS_WIN;\n    }\n\n    if (this.checkLose()) {\n      this.status = Game.STATUS_LOSE;\n    }\n  }\n\n  moveDown() {\n    this.getState().reverse();\n    this.moveUp();\n    this.getState().reverse();\n    this.updateTable();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` + the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = Game.STATUS_PLAYING;\n\n    this.spawnNumber();\n    this.spawnNumber();\n\n    this.updateTable();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n\n    this.start();\n  }\n\n  checkWin() {\n    return this.getState().some((row) => {\n      return row.some((cell) => cell === 2048);\n    });\n  }\n\n  checkLose() {\n    const areZeros = this.getState().some((row) => {\n      return row.some((cell) => cell === 0);\n    });\n\n    const areSameNumbersRows = this.getState().some((row) => {\n      return row.some((cell, columnIndex) => {\n        return cell === row[columnIndex + 1];\n      });\n    });\n\n    const areSameNumbersColumns = this.getState().some(\n      (row, rowIndex, state) => {\n        return row.some((cell, columnIndex) => {\n          if (rowIndex + 1 < 4) {\n            return cell === state[rowIndex + 1][columnIndex];\n          } else {\n            return false;\n          }\n        });\n      },\n    );\n\n    return !areZeros && !areSameNumbersRows && !areSameNumbersColumns;\n  }\n\n  spawnNumber() {\n    const emptyCells = [];\n\n    this.getState().forEach((row, rowIndex) => {\n      row.forEach((cell, columnIndex) => {\n        if (cell === 0) {\n          emptyCells.push([rowIndex, columnIndex]);\n        }\n      });\n    });\n\n    const [randomRowIndex, randomColumnIndex] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    if (Math.floor(Math.random() * 10)) {\n      this.getState()[randomRowIndex][randomColumnIndex] = 2;\n    } else {\n      this.getState()[randomRowIndex][randomColumnIndex] = 4;\n    }\n  }\n\n  areStatesEqual(clone) {\n    return this.getState().every((row, rowIndex) => {\n      return row.every(\n        (cell, cellIndex) => cell === clone[rowIndex][cellIndex],\n      );\n    });\n  }\n\n  updateTable() {\n    this.tableRows.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        cell.className = 'field-cell';\n        cell.textContent = this.getState()[rowIndex][cellIndex];\n        cell.classList.add(`field-cell--${cell.textContent}`);\n      });\n    });\n\n    this.tableRows.forEach((row) => {\n      row.forEach((cell) => {\n        if (cell.textContent === '0') {\n          cell.textContent = '';\n        }\n      });\n    });\n  }\n}\n"],"names":["$a5fd07fa01589658$export$2e2bcd8739ae039","score","status","STATUS_IDLE","STATUS_PLAYING","STATUS_WIN","STATUS_LOSE","INITIAL_MERGE_FLAGS","constructor","table","initialState","state","tableBody","tBodies","tableRows","rows","map","row","cells","moveTilesToTheLeft","rowIndex","mergeFlags","fromIndex","toIndex","moveLeft","clone","structuredClone","getState","forEach","columnIndex","areStatesEqual","spawnNumber","updateTable","checkWin","checkLose","moveRight","reverse","moveTilesUp","moveUp","_","moveDown","getScore","getStatus","start","restart","some","cell","areZeros","areSameNumbersRows","areSameNumbersColumns","emptyCells","push","randomRowIndex","randomColumnIndex","Math","floor","random","length","every","cellIndex","className","textContent","classList","add","$09e991522ca7e64e$var$game","document","querySelector","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$loseMeassage","$09e991522ca7e64e$var$winMessage","addEventListener","contains","remove","e","key"],"version":3,"file":"index.8079c819.js.map"}